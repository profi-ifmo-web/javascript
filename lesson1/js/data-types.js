'use strict'; // заставляет обрабатывать код в строгом режиме
// для своевременного выявления ошибок
// для предотвращения использования небезопасного ситаксиса,
// который был разрешен в прошлых версиях

// однострочный комментарий ctrl + /
/* многострочный
комментарий */

// Браузеры способны выаолнять js код благодаря
// встроенным "движкам Javascript"
// V8 - Chrome, Opera
// SpiderMonkey - FireFox
// 1. читают js иструкции
// 2. преобразование инструкций в машинный язык
// 3. выполнение преобразованного кода

// Инструкции выполняются последовательно,
// в конце инструкций ставится ;

// взаимодействие с html
// обработка браузерных событий
// валидация пользовательских данных
// отправка ajax запросов
// (отправка запросов на сервер без перезагрузки страницы)
// расчеты на стороне клиента (в браузере)

// Программа работает с данными, например, данные пользователя,
// данные, которые пришла с сервера, элементы html и тд
// Данные мы будем хранить в переменных.
// Переменная - поименованая область памяти для хранения данных и
// обращения к ним по мере неодходимости
// Типы данных, которые мы можем использовать в JavaScript:
// Примитивные типы: числа, строки, логический тип, null, undefined
// Ссылочные типы: массивы, объекты (для хранения наборов данных)
// Символ для хранения уникальных идентификаторов

// для объявления (создания) переменных используется ключевое слово let,
// за которым идет имя переменной
let variableName;
// присвоим значение переменной
variableName = 'Данные, которые будут храниться в переменной. ' +
    'К ним мы сможем обратиться по имени переменной';
// тип данных переменной задается в момент, когда мы присваиваем значение,
// поэтому js называют языком со слабой динамической типизацией

// варианты объявления переменных и присваивания значений
// Объявили переменную и присвоили ей значение
let age = 67;
// объявили несколько переменных и присвоиди им значения
let login = 'qwe', password = 'gnrw355';
// объявили переменные active и closed, closed присвоили значение,
// а active нет
let active, closed = true;

// переопределение (изменение) значения переменной
// имя переменной уже без let, тк это повторное обращение к переменной
password = 344;

// отладка
console.log(password); // доступ к значению переменной по ее имени
console.warn("Предупреждение!!!");
console.error("Здесь ошибка...");

// замер времени выполнения кода
console.time("Счетчик №1");
// код, для которого измеряем время выполнения
console.timeEnd("Счетчик №1");

// alert()
// document.write()

// Примитивные типы данных:
// Числа - тип Number, хранит целые числа и числа с плавающей точкой
age = 24; // целое чило
age = 52.5; // число с плавающей точкой
// Кроме обычных чисел, существуют:
// Infinity,
// -Infinity,
// NaN - Not A Number - ошибка вычисления

console.log(age / 0); // Infinity
console.log(-age / 0); // -Infinity
console.log("Возраст" / age); // NaN

// Строки String
// пишутся в двойных или одинарных кавычках,
// в обратных кавычках
// (используются, если в строку нужно передать значение переменной)
login = "qwe";
login = 'qwe';

// если текст внутри строки нужно выделить кавычками, то это
// должы быть кавычки другого типа или они должы быть экранированы
let welcome = 'Добро пожаловать на \'САЙТ\'';
welcome = 'Добро пожаловать на "САЙТ"';

let loginInfo = `Значения переменных login: ${login}, password: ${password}`;
console.log(loginInfo);

// логический тип Boolean
// принимает только 2 значения: истина или ложь
// используется для хранения состояний,
// при проверке условий
active = true;
closed = false;
console.log(active, closed);

// undefined - значение не было присвоено
let someVariable;
console.log(someVariable);

// null - значение неизвестно
let unknownValue = null;
console.log(unknownValue);

// определить тип данных typeof имяПеременной
let some = `${age}`;
console.log(some); // 52.5 типа String
console.log(typeof some); // string
console.log(typeof age);
console.log(typeof someVariable); // undefined
console.log(typeof unknownValue); // object

// значения константам необходимо присваивать
// в момент объявления
// изменить значение константы нельзя
const ANSWER_STATE = 'OK';
// ANSWER_STATE = 'Error'; Ошибка
const state = 'Error';

// область видимости переменной:
// для переменных, объявленных через let
// областью видимости является блок фигурных скобок
// if { }, циклы { }, { }, функции { }
some = "переменная";

if (some === "переменная") {
    let varInIf = "переменная в if";
}
let  varInIf = "переменная вне {}";

// переменные на 139 и 141 строчках - разные переменные

// область видимости переменых, объявленных через var - глобальная
// может быть органичена только функциями

// примитивные типы данных
let x = 56;
let y = x; // переменной у присволи значение переменной x
console.log(x, y); // 56, 56

x = 1000;
console.log(x, y); // 1000, 56

// ссылочные типы данных
let arr = [2, 5, -9, 0];
let newArr = arr;
console.log(arr, newArr); // [ 2, 5, -9, 0 ] [ 2, 5, -9, 0 ]

arr[2] = 10000;
console.log(arr, newArr); // [ 2, 5, 10000, 0 ] [ 2, 5, 10000, 0 ]

/*
x -> 56

y -> 56

arr  --->   [2, 5, -9, 0]  <--- newArr
*/

