'use strict';

/*
* Функции в javascript являются объектами.
* При объявлении функции мы сохраняем набор инструкций,
* при вызове функции эти интсрукции начинают выполнятся.
* Функции позволяют избежать дублирования кода, структурировать
* его и тп.
* Функции могут быть именоваными и анонимными + синтаксис
* стрелочных функций.
* Имя функции должно быть глаголом. Функция должна делать то,
* что подразумевается ее названием. Одна функция - одно действие.
* */

let a = 34, b = 45;
let result = a + b;
console.log(result);

let n = 70, m = 12;
result = n + m;
console.log(result);

// выносим операцию сложения в функцию
// объявление функции с именем getSum
function getSum(first, second) { // аргументы функции
    // тело функции
    // чтобы результат сложения не остался внутри функции,
    // функция должна вернуть его, для этого используем return
    return first + second;
} // при объявлении именованой функции ; после } не ставится

// вызов функции
// (именованиые функции можно вызывать до и после объявления)
// вызов функции осуществляется по ее имени
// 1. в момент вызова функция начинает выполнять перечисленные
// в ней инструкции
// 2. функция принимает на вход 2 аргумента, передадим в функцию
// значение переменной 'a' и значение переменной 'b'. В момент вызова
// getSum(a, b) значение переменной 'a' скопируется в 'first',
// значение переменной 'b' скопируется в 'second'
// 3. функция возвращает результат сложения, этот результат мы можем
// созранить в переменную
result = getSum(a, b);
console.log(result);

result = getSum(n, m);
console.log(result);

// Аргументы функции:
// 1. через аргументы мы можем передать в функцию различные данные
// 2. если функция не принимает аргументов, то () остаются пустыми
// 3. можно задать функции значения аргументов по умолчанию,
// при этом сначала указываются обязательные агрументы, потом
// аргументы с дефолтными значениями
// 4. в функцию можно передать переменное количество аргументов
// через ... . Тогда в функции мы получим их в виде массива,
// при этом переменное количество аргументов определяется самым последним

// return используется для того, чтобы:
// 1. вернуть из функции данные (если не задан, функция вернет undefined)
// 2. прервать работу функции
function less18(age) {
    return age < 18;
}

function getGreetingStr(userAge, userName = "Гость") {
    // если возраст не подходит, прерываем работу функции
    // если условие окажется верным, то сработает return и функция
    // завершит свою работу
    if (userAge < 7 || userAge > 200) return "Пользователь Вашего возраста не можетвойти на сайт";
    let greetingStr = `Добро пожаловать ${userName}`;
    if (less18(userAge)) return greetingStr + " Вы не можете осуществлять покупки";
    return greetingStr + " Весь функционал сайта доступен";
}


// 12 скопируется в userAge
// Алиса скопируется в userName, значение по умолчанию Гость игнорируется
getGreetingStr(NaN, "Алиса");
// Алиса скопируется в userAge
// второй аргумент не передается, поэтому значение userName
// будет равно Гость
getGreetingStr("Алиса");
// 35 скопируется в userAge
// второй аргумент не передается, поэтому значение userName
// будет равно Гость
getGreetingStr(35);
// первый аргумент не передается и у userAge нет значения по умолчанию,
// поэтому его значение будет равно undefined
// второй аргумент не передается, поэтому значение userName
// будет равно Гость
getGreetingStr();
// 12 скопируется в userAge
// Алиса скопируется в userName, значение по умолчанию Гость игнорируется
getGreetingStr(12, "Алиса", [2, 4, 6]);

function getMin(a, b) {
    return a < b ? a : b;
}

// переменное количество аргуметов
function getNumsSum(...nums) {
    // ...nums - аргументы, которые передали в функцию
    // соберутся в массив с именем nums
    let sum = 0;
    for (let num of nums) {
        sum += num;
    }
    return sum;
}

result = getNumsSum(3, 64, 7);
console.log(result);

result = getNumsSum(-93, 462, 674, 0, -1, 45);
console.log(result);


// объекты (ссылочные типы) передаются в функцию по ссылке,
// примитивы по значению

let catName = "Том";
let codes = [12, 0, 1, 45, 13];

function changeCatName(name) {
    name += " Кот";
}

function changeCodes(arr) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] < 10) arr[i] += 100;
    }
}

changeCatName(catName);
changeCodes(codes);
console.log(catName);
console.log(codes);

function printNums(num) {
    while (num >= 0) {
        console.log(num);
        num--;
    }
}

function printNums2(num) {
    if (num >= 0) {
        console.log(num);
        // рекурсивный вызов функции - функция вызывается
        // внутри себя, но с другими аргументами
        printNums2(num - 1);
    }
}

// анонимные функции
// должы быть либо присвоены переменной,
// либо быть переданы аргументом в другую функцию
// могут быть вызваны только после объявления

// значение переменной fullInfo - функция
let fullInfo = function (name, surname, ...others) {
    let resultStr = `${name} ${surname}. Дополнительная информация: `;
    for (let elem of others) {
        resultStr += elem + "|";
    }
    return resultStr;
}; // если функция присвоена переменной, то после } ставится ;

//получим значение переменной fullInfo
console.log(fullInfo);

// вызов функции
console.log(fullInfo());
// замыкание
function multi(n) {
    let x = n;
    return function (m) {
        return x * m;
    }
}

let multiSix = multi(6);
console.log(multiSix);
result = multiSix(5);
console.log(result);

let multiTen = multi(10);
result = multiTen(5);
console.log(result);





